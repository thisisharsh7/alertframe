generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model alerts {
  id               String      @id
  userId           String
  url              String
  cssSelector      String
  elementType      String      @default("single")
  checkFrequency   Int         @default(10)
  lastCheckedAt    DateTime?
  nextCheckAt      DateTime?
  notifyEmail      Boolean     @default(true)
  notifySlack      Boolean     @default(false)
  slackWebhook     String?
  notifyDiscord    Boolean     @default(false)
  discordWebhook   String?
  status           String      @default("active")
  errorMessage     String?
  title            String?
  description      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  frequencyLabel   String?
  frequencyMinutes Int         @default(600)
  users            users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  changes          changes[]
  snapshots        snapshots[]

  @@index([nextCheckAt])
  @@index([status])
  @@index([userId])
}

model changes {
  id         String    @id
  alertId    String
  changeType String
  diffData   Json
  summary    String?
  detectedAt DateTime  @default(now())
  notified   Boolean   @default(false)
  notifiedAt DateTime?
  viewed     Boolean   @default(false)
  viewedAt   DateTime?
  alerts     alerts    @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId])
  @@index([detectedAt])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model snapshots {
  id          String   @id
  alertId     String
  htmlContent String
  textContent String?
  itemCount   Int?
  capturedAt  DateTime @default(now())
  alerts      alerts   @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId])
  @@index([capturedAt])
}

model users {
  id                     String     @id
  email                  String     @unique
  name                   String?
  image                  String?
  emailVerified          DateTime?
  stripeCustomerId       String?    @unique
  stripeSubscriptionId   String?    @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime
  gmailAccessToken       String?
  gmailConnected         Boolean    @default(false)
  gmailEmail             String?
  gmailRefreshToken      String?
  gmailTokenExpiry       DateTime?
  accounts               accounts[]
  alerts                 alerts[]
  sessions               sessions[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
