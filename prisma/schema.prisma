generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  alerts        Alert[]
  accounts      Account[]
  sessions      Session[]

  // Subscription
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// NextAuth Account
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth Verification Token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Alerts configuration
model Alert {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Target
  url         String
  cssSelector String   // Element to monitor
  elementType String   @default("single") // 'single', 'list', 'page'

  // Configuration
  checkFrequency    Int     @default(10) // DEPRECATED: hours (keep for migration)
  frequencyMinutes  Int     @default(600) // Check frequency in minutes
  frequencyLabel    String? // Display label (e.g., "Every 2 minutes")
  lastCheckedAt     DateTime?
  nextCheckAt       DateTime?

  // Notification
  notifyEmail    Boolean @default(true)
  notifySlack    Boolean @default(false)
  slackWebhook   String?
  notifyDiscord  Boolean @default(false)
  discordWebhook String?

  // Status
  status      String   @default("active") // 'active', 'paused', 'error'
  errorMessage String?

  // Metadata
  title       String?  // User-defined name
  description String?

  snapshots   Snapshot[]
  changes     Change[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([nextCheckAt])
  @@map("alerts")
}

// HTML Snapshots
model Snapshot {
  id          String   @id @default(cuid())
  alertId     String
  alert       Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)

  htmlContent String   @db.Text
  textContent String?  @db.Text // Plain text for easy comparison
  itemCount   Int?     // For lists

  capturedAt DateTime @default(now())

  @@index([alertId])
  @@index([capturedAt])
  @@map("snapshots")
}

// Detected Changes
model Change {
  id          String   @id @default(cuid())
  alertId     String
  alert       Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)

  changeType  String   // 'added', 'removed', 'modified'
  diffData    Json     // Detailed diff
  summary     String?  // Human-readable summary

  detectedAt  DateTime @default(now())
  notified    Boolean  @default(false)
  notifiedAt  DateTime?
  viewed      Boolean  @default(false)
  viewedAt    DateTime?

  @@index([alertId])
  @@index([detectedAt])
  @@map("changes")
}
